import csv
import sqlite3

from flask import Flask, request, g
from flask import render_template,url_for,redirect

#DATABASE = '/var/www/html/flaskapp/Wikipedia-sims-hdp.db'
DATABASE = '/Users/rangel/CDIPS_Content_Rec/Tonatiuh/flaskapp/Wikipedia-lsi.db'

app = Flask(__name__)
app.config.from_object(__name__)

def connect_to_database():
    return sqlite3.connect(app.config['DATABASE'])

def get_db():
    db = getattr(g, 'db', None)
    if db is None:
        db = g.db = connect_to_database()
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, 'db', None)
    if db is not None:
        db.close()

def execute_query(query, args=()):
    cur = get_db().execute(query, args)
    rows = cur.fetchall()
    cur.close()
    return rows

@app.route("/viewdb")
def viewdb():
    rows = execute_query("""SELECT * FROM Wikipedia""")
    return '<br>'.join(str(row) for row in rows)

@app.route('/')
def my_form():
    return render_template("my-form.html")



@app.route("/click_on_url/<url_id>")
def click_on_url(url_id):
    wiki_url='https://en.wikipedia.org/?curid={}'.format(url_id)
    return redirect(wiki_url)

@app.route('/click_on_foo')
def click_on_foo():
    return redirect(url_for('foo'))
    #return redirect("http://www.google.com")

@app.route('/foo')
def foo():
    return 'Hello Foo!'


@app.route('/result', methods=['GET','POST'])
def result():
    if request.method == 'POST':
        title_in = request.form['text']
        rows = execute_query("""SELECT * FROM Wikipedia WHERE title =?""",
                             [title_in.title()])
        titles = rows[0][3] # a string that needs to be parsed
        urls = rows[0][4]   # string
        scores = rows[0][5] # string
        titles = titles.replace('[','').replace(']','').replace('\'','').split(',')
        urls = urls.replace('[','').replace(']','').replace('\'','').split(',')
        scores = scores.replace('[','').replace(']','').replace(' ','').split(',')
        new_rows = [(title,url,score) for title,url,score in zip(titles,urls,scores)]

    return render_template("result.html", headers = new_rows)


if __name__ == '__main__':
	app.run(debug=True)
